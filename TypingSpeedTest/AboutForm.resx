<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label4.Text" xml:space="preserve">
    <value>        Firstly, the app reads a file containing the list of quotes and picks a random quote from that list to display on screen. Then, anytime you type something into the textbox below the quote, it will take the text from the box, split it into its individual characters, and compares each character to the quote by also splitting its text into individual characters. Next, if all of the typed characters in the textbox match those in the quote and is the same length as the quote, it will calculate the test results and save a test object to the test file. Finally, once the test results are saved, a function is called that starts a new test. This involves getting a new quote to display, clearing the textbox text, and updating the values in the info box on the top right.
</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>        Apon clicking the View Tests button on the menu bar, the Typing Stats Form pops up, showing all previous tests in order from newest to oldest, top to bottom. I did this using a Table Layout Panel because it created a nice looking table. The biggest and only downside to using this is that there was no way that I was able to find to not only adjust the RowCount property but the Controls of the table after it had been created. That meant I had to create it manually instead of using the Design editor since the amount of tests is a constantly changing variable.</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>        The Quote Editor can be accessed via the Quote Editor button on the menu bar. The Quote Editor, as the name suggests, is used to view, add, delete, and edit quotes in the quote list. This is by far the feature that took me the longest to make. First off, I used the listBox to display the quotes and to take advantage of its selecting feature, alowing for me to get the index of the selected quote in the quote list. This was very helpful for doing the editing and deleting of quotes.</value>
  </data>
  <data name="label11.Text" xml:space="preserve">
    <value>        Originally when I started making this project, I assumed that WPM was calculated by dividing the amount of words(a word being of varying length) by the time it took to type. However, it came to my attention later on in development that the industry standard is to have a word be defined as a constant amount of characters rather than being of varying length. I found that most all typing speed testers use a word length constant of 5 characters, so that is what I used.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AABAREQBQEREAUBERAFAREQCQEREAkBERAFAREQBQEREAUBERAJAREQCQEREAUBERAFAREQBQEREAkBE
        RAJAREQBQEREAUBERAFAREQCQEREAkBERAFAREQBQEREAUBERAJAREQCQEREAUBERAFAREQBQEREAkBE
        RAJAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUFFRQFBRUUBQUVFAUFF
        RQFBRUUBQUVFAUFFRQFBRUUBQUVFAUFFRQFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFBRUUBQ0hIAUNISAFDSEgBQ0hIAUNISAFDSEgBQ0hIAUNISAFBRUUBQEREAUBERAFAREQBOz09Ajs9
        PQI7PT0COz09Ajs9PQI7PT0COz09Ajs9PQI7PT0COz09Aj1AQAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQUVFATk7OwI2NzcGNjc3BjY3NwY2NzcGNjc3BjY3NwY2NzcGNjc3Bjg6OgNAREQBIx4eADMz
        MyAzMzOVMzMzpTMzM6UzMzOlMzMzpTMzM6YzMzOmMzMzpzMzM6czMzOqMzMzbzU2NgVGS0sBQEREAUBE
        RAFAREQBQEREAUBERAElISEAMzMzIDMzM6QzMzOzMzMzsjMzM7IzMzOyMzMzsjMzM7IzMzOuMzMzQUBE
        RAEvLi4AMzMzYzMzM/4zMzP/MzMz/TMzM/gzMzPyMzMz6jMzM+IzMzPaMzMz0DMzM8gzMzOGMzMzBjMz
        MwBFS0sAR01NAEFFRQFAREQBQEREASglJQAzMzMjMzMz5DMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMz
        M/wzMzNpQUVFAY+rqwAzMzOWMzMz8TMzM2ozMzNGMzMzPDMzMzQzMzNIMzMzRzMzMz4zMzM2MzMzLjM0
        NCQzNDQfMzQ0HjQ0NB00NDQSNzg4AkJGRgFAREQBKicnADMzMyYzMzPmMzMz/zMzM/8zMzP/MzMz/zMz
        M/8zMzP/MzMz/TMzM21/l5cANDQ0DDMzM8UzMzPNMzMzEDMzMwAzMzMAMzMzWTMzM90zMzPmMzMz5TMz
        M+QzMzPiMzMz4TMzM+AzMzPeMzMz3TMzM80zMzNfNzg4AkRJSQEuLCwAMzMzPjMzM/QzMzP/MzMz/zMz
        M/8zMzP/MzMz/zMzM/8zMzP7MzMzZSspKQAzMzMmMzMz6DMzM586PDwCQ0hIAVVfXwAzMzOYMzMz/zMz
        M/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM+kzMzNJLCoqAC4sLAAzMzN2MzMz/zMz
        M/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/YzMzNRLy4uADMzM0wzMzP6MzMzbS8tLQBAREQBJiIiADMz
        MzszMzO0MzMzzTMzM90zMzPrMzMz9jMzM/0zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM9IzMzMoMzMzETMz
        M8UzMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz6TMzMzQvLS0AMzMzezMzM/czMzM/LiwsAEBE
        RAFAREQBP0NDATU2Ngg0NDQSMzQ0HjMzMy4zMzNBMzMzVzMzM24zMzOGMzMzzTMzM/8zMzP/MzMz/zMz
        M7AzMzN/MzMz+jMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzPMMzQ0FTU2NgUzMzOtMzMz3zMz
        Mx0iHBwAQEREAUBERAFAREQBR01NAU5XVwBNVVUAAAAAAAAAAAAAAAAAP0NDADMzMwAzMzNJMzMz8zMz
        M/8zMzP/MzMz/DMzM/kzMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM5U8Pz8BMzMzGjMz
        M9YzMzO3NDU1B0pQUAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBWmZmADQ0
        NAozMzOvMzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP2MzMzTC8u
        LgAzMzM/MzMz8TMzM4YrKSkAQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBRkxMAWNy
        cgBIT08ALSwsADMzM0wzMzP0MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMz
        M700NDQPAAAAADMzM2IzMzP1MzMzUy8tLQBAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQkZGAURJ
        SQA1NTUKNDQ0FzQ0NBA5OzsBMzMzCzMzM7IzMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMz
        M/8zMzPzMzMzUS0rKwBAREQBMzMzIDMzM1szNDQSAAAAAEBERAFAREQBQEREAUBERAFAREQBQEREAWBt
        bQA0NDQKMzMzXzMzM7kzMzPXMzMzyTMzM4MzMzMZMzMzTjMzM/UzMzP/MzMz/zMzM/8zMzP/MzMz/zMz
        M/8zMzP/MzMz/jMzM5A0NTUHTVVVAUBERAFAREQBQUVFAEBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFKUVEBNTU1BjMzM4MzMzP4MzMz/zMzM/8zMzP/MzMz/zMzM7kzMzMoMzMztDMzM/8zMzP/MzMz/zMz
        M/8zMzP/MzMz/zMzM/4zMzOmMzMzFBEHBwBAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAS0rKwAzMzNCMzMz8DMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM4EzMzNKMzMz7TMz
        M/8zMzP/MzMz/zMzM/8zMzPvMzMzizM0NBQWDQ0AQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBKygoADMzM4YzMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMzyDM0
        NBMzMzNRMzMzsTMzM88zMzPGMzMzlTMzM0A0NTUFV2JiAEBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBFRQEAAAAAMzMzmDMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMz
        M/8zMzPXMzQ0GDEwMAA1NTUHNDQ0EjQ0NA43ODgCAAAAAEJHRwFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAS4sLAAzMzN1MzMz/zMzM/8zMzP/MzMz/zMz
        M/8zMzP/MzMz/zMzM7o0NTUKVF5eAEVLSwFRWloASlFRAUJGRgFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBKSYmADMzMyozMzPbMzMz/zMz
        M/8zMzP/MzMz/zMzM/8zMzP4MzMzYiwpKQBAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFBRkYBT1lZADMz
        M1IzMzPdMzMz/zMzM/8zMzP/MzMz8jMzM4Y0NDQKX21tAEBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFCRkYBOjw8ATMzMyozMzN3MzMzmzMzM4kzMzNFNDU1B1JbWwBAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFBRUUBRElJAE5YWABGTEwBSE9PAEpRUQBCRkYBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBFRQFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBERAFAREQBQEREAUBE
        RAFAREQBQEREAUBERAFAREQBQEREAUBERAJAREQCQEREAkBERAFAREQBQEREAkBERAJAREQCQEREAUBE
        RAFAREQCQEREAkBERAJAREQBQEREAUBERAJAREQCQEREAkBERAFAREQBQEREAkBERAJAREQCQEREAUBE
        RAFAREQCQEREAkBERAJAREQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAEAEABxABAAAQAhgAEAIIA
        DACKAAAAiAAAAAh/AAAAAQABEAOAARAIAAIQIAAAQAAABABAAAgAQAAQAEAIQABACgAAQBAAACAQAAAA
        IAAADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>